#version 460
#extension GL_EXT_ray_tracing : enable

#include "common.glsl"
#include "Lights.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 10, set = 0) uniform LightUBO {
	Light DirectionalLight;
};
layout(binding = 11, set = 0) uniform UniformBufferObject 
{
    mat4 view;
    mat4 proj;
	uint frameIndex;
} ubo;
layout(binding = 12, set = 0, rgba32f) uniform image2D positionDepthTex;
layout(binding = 13, set = 0, rgba32f) uniform image2D normalMetalnessTex;
layout(binding = 14, set = 0, rgba32f) uniform image2D albedoRoughnessTex;

layout(binding = 15, set = 0, rgba32f) uniform image2D reflectionOut;

layout(set = 1, binding = 0) uniform sampler blueNoiseSampler;
layout(set = 1, binding = 1) uniform texture2D blueNoiseTextures[64];

#include "rayPayload.glsl"
#include "pbrMetallicRoughness.glsl"

layout(location = 0) rayPayloadEXT rayPayload payload;
layout(location = 1) rayPayloadEXT bool isShadowed;

const float tmin = 0.1;
const float tmax = 10000.0;

#include "sky.glsl"

/////////////////////////////////////////////////////////////////////////////////////////
// https://learnopengl.com/pbr/ibl/specular-ibl
float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}  

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;
	
    float phi = 2.0 * pi * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}  
/////////////////////////////////////////////////////////////////////////////////////////

vec3 reinhard(vec3 v)
{
    return v / (1.0f + v);
}

// Avoid really high spots
vec3 colorCompression(vec3 v) {
	return reinhard(v);
}

void main() 
{
	vec4 origin = inverse(ubo.view) * vec4(0, 0, 0, 1);
	
	vec4 positionDepth = imageLoad(positionDepthTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 normalMetalness = imageLoad(normalMetalnessTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 albedoRoughness = imageLoad(albedoRoughnessTex, ivec2(gl_LaunchIDEXT.xy));

	vec3 position = positionDepth.xyz;
	float depth = positionDepth.w;
	vec3 normal = normalMetalness.xyz;
	float metalness = normalMetalness.w;
	vec3 albedo = albedoRoughness.rgb;
	float roughness = albedoRoughness.a;

	vec3 toOrigin = normalize(origin.xyz - position);

    payload.color = vec4(0.0);
    payload.recursionDepth = 1; // We've technically already solved the first ray (by rasterisation, but still.)

	// Basis for ray differentials
	vec3 tangent;
	vec3 bitangent;
	if(normal.x < 0.9) {
		tangent = cross(vec3(1.0, 0.0, 0.0), normal);
		bitangent = cross(normal, tangent);
	} else {
		tangent = cross(vec3(0.0, 0.0, 1.0), normal);
		bitangent = cross(normal, tangent);
	}

	// Reflection
#if 1
	// One sample per pixel than we'll try to filter later (keyword: try)
	if(depth > 0) {
	#if 1
		// Single sample directly on the reflection direction
		// Basically, this just ignore roughness, hoping we can filter it later (spoiler: we can't really).
		vec3 direction = reflect(-toOrigin, normal);
		payload.raydx = rotateAxis(direction, normal, 0.001);
		payload.raydy = rotateAxis(direction, cross(normal, direction), 0.001);
		traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, position, tmin, direction, tmax, 0);
	#else
		// Single sample, Blue noise and importance sampling.
		// With proper denoising (or at least some form of temporal accumulation - 'simply' TAA?) this would be better than the above solution, but right now it is way too distracting :(
		vec4 noise = texture(sampler2D(blueNoiseTextures[ubo.frameIndex % 64], blueNoiseSampler), vec2(gl_LaunchIDEXT.xy / 64.0));
        vec3 H = ImportanceSampleGGX(noise.xy, normal, roughness);
        vec3 direction  = normalize(2.0 * dot(toOrigin, H) * H - toOrigin);
		payload.raydx = rotateAxis(direction, normal, 0.001);
		payload.raydy = rotateAxis(direction, cross(normal, direction), 0.001);
		traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, position, tmin, direction, tmax, 0);
	#endif
		imageStore(reflectionOut, ivec2(gl_LaunchIDEXT.xy), vec4(colorCompression(payload.color.rgb), roughness));
	} else {
		imageStore(reflectionOut, ivec2(gl_LaunchIDEXT.xy), vec4(0));
	}
#else 
	// Multiple samples, obviously way too slow for real time and high roughness, but can be used to compare approximations.
	// See https://learnopengl.com/pbr/ibl/specular-ibl (there it's used to pre-filter a environment map)
	const uint SAMPLE_COUNT = 8u;
    float totalWeight = 0.0;   
    vec3 prefilteredColor = vec3(0.0);     
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
		vec2 Xi = texture(sampler2D(blueNoiseTextures[(SAMPLE_COUNT * ubo.frameIndex + i) % 64], blueNoiseSampler), vec2(gl_LaunchIDEXT.xy / 64.0)).xy;
		vec3 H  = ImportanceSampleGGX(Xi, normal, roughness);
        vec3 L  = normalize(2.0 * dot(toOrigin, H) * H - toOrigin);

        float NdotL = max(dot(normal, L), 0.0);
        if(NdotL > 0.0)
        {
			payload.raydx = rotateAxis(L, normal, 0.001);
			payload.raydy = rotateAxis(L, cross(normal, L), 0.001);
			traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, position, tmin, L, tmax, 0);
            prefilteredColor += NdotL * payload.color.rgb;
            totalWeight      += NdotL;
        }
    }	
	if(totalWeight > 0)
		prefilteredColor = prefilteredColor / totalWeight;
	imageStore(reflectionOut, ivec2(gl_LaunchIDEXT.xy), vec4(colorCompression(prefilteredColor), roughness));
#endif
}
