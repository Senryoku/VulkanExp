#version 460
#extension GL_EXT_ray_tracing : enable

#include "ProbeGrid.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 6, set = 0, std140) uniform Block {
    ProbeGrid grid;
};
layout(binding = 7, set = 0) buffer ProbesBlock { uint Probes[]; };
layout(binding = 10, set = 0, r11f_g11f_b10f) uniform image2D color;
layout(binding = 11, set = 0, rg16f) uniform image2D depth;

layout(push_constant) uniform Push {
    mat4 randomOrientation;
    uint updateIndex;
} push;

#include "irradiance.glsl"

struct payload_t {
	bool isBackface;
	float depth;
};

layout(location = 0) rayPayloadEXT payload_t payload;

const float tmin = 0.01f;

void main() 
{
    vec3 gridCellSize = (grid.extentMax - grid.extentMin) / grid.resolution;
    float maxDistance = length(gridCellSize);
    float tmax = 1.5f * maxDistance;

	vec4 origin = vec4(probeIndexToWorldPosition(ivec3(gl_LaunchIDEXT.xyz), grid), 1);
    bool affectGeometry = false;

    uint backfaceHits = 0;
	for(int i = 0; i < 512; ++i) {
		vec3 direction = mat3(push.randomOrientation) * sphericalFibonacci(i, grid.raysPerProbe);

        payload.isBackface = false;
        payload.depth = tmax;
		traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, origin.xyz, tmin, direction, tmax, 0);
        if(payload.depth < maxDistance) {
            if(payload.isBackface) ++backfaceHits;
            vec3 position = origin.xyz + payload.depth * direction;
            vec3 dist = abs(position - origin.xyz);
            if(dist.x <  gridCellSize.x && dist.y <  gridCellSize.y && dist.z <  gridCellSize.z)
                affectGeometry = true;
        }
    }
    
    if(!affectGeometry || backfaceHits > 0.5 * grid.raysPerProbe) {
        Probes[probeLinearIndex(ivec3(gl_LaunchIDEXT.xyz), grid)] = 0; // OFF
    } else {
        Probes[probeLinearIndex(ivec3(gl_LaunchIDEXT.xyz), grid)] = 1; // ON
    }
}
