#version 460

layout (local_size_x = 28, local_size_y = 1, local_size_z = 1) in;

#include "ProbeGrid.glsl"

layout(binding = 6, set = 0, std140) uniform Block {
    ProbeGrid grid;
};
layout(binding = 7, set = 0) buffer ProbesBlock { uint Probes[]; };
layout(set = 0, binding = 13, r11f_g11f_b10f) uniform image2D irradiance;
layout(set = 0, binding = 14, rg16f)          uniform image2D depth;
layout(set = 0, binding = 15) buffer ProbeIndicesBlock { uint indices[]; };

layout(push_constant) uniform Push {
    mat4 randomOrientation;
} push;

#include "irradiance.glsl"

ivec2 irradianceCopiesDst[28] = {
    // Borders
    ivec2(0, 0),
    ivec2(0, 7),
    ivec2(7, 0),
    ivec2(7, 7),
    // Rows
    ivec2(0, 1),
    ivec2(0, 2),
    ivec2(0, 3),
    ivec2(0, 4),
    ivec2(0, 5),
    ivec2(0, 6),
    ivec2(7, 1),
    ivec2(7, 2),
    ivec2(7, 3),
    ivec2(7, 4),
    ivec2(7, 5),
    ivec2(7, 6),
    // Cols
    ivec2(1, 0),
    ivec2(2, 0),
    ivec2(3, 0),
    ivec2(4, 0),
    ivec2(5, 0),
    ivec2(6, 0),
    ivec2(1, 7),
    ivec2(2, 7),
    ivec2(3, 7),
    ivec2(4, 7),
    ivec2(5, 7),
    ivec2(6, 7),

};

ivec2 irradianceCopiesSrc[28] = {
    ivec2(6, 6),
    ivec2(6, 1),
    ivec2(1, 6),
    ivec2(1, 1),
    
    ivec2(1, 6),
    ivec2(1, 5),
    ivec2(1, 4),
    ivec2(1, 3),
    ivec2(1, 2),
    ivec2(1, 1),
    ivec2(6, 6),
    ivec2(6, 5),
    ivec2(6, 4),
    ivec2(6, 3),
    ivec2(6, 2),
    ivec2(6, 1),
    
    ivec2(6, 1),
    ivec2(5, 1),
    ivec2(4, 1),
    ivec2(3, 1),
    ivec2(2, 1),
    ivec2(1, 1),
    ivec2(6, 6),
    ivec2(5, 6),
    ivec2(4, 6),
    ivec2(3, 6),
    ivec2(2, 6),
    ivec2(1, 6),
};


ivec2 depthCopiesDst[4 + 4 * 14] = {
    // Corners
    ivec2(0,  0),
    ivec2(0,  15),
    ivec2(15, 0),
    ivec2(15, 15),
    // Cols
    ivec2(0, 1),
    ivec2(0, 2),
    ivec2(0, 3),
    ivec2(0, 4),
    ivec2(0, 5),
    ivec2(0, 6),
    ivec2(0, 7),
    ivec2(0, 8),
    ivec2(0, 9),
    ivec2(0, 10),
    ivec2(0, 11),
    ivec2(0, 12),
    ivec2(0, 13),
    ivec2(0, 14),
    ivec2(15, 1),
    ivec2(15, 2),
    ivec2(15, 3),
    ivec2(15, 4),
    ivec2(15, 5),
    ivec2(15, 6),
    ivec2(15, 7),
    ivec2(15, 8),
    ivec2(15, 9),
    ivec2(15, 10),
    ivec2(15, 11),
    ivec2(15, 12),
    ivec2(15, 13),
    ivec2(15, 14),
    // Rows
    ivec2(1, 0),
    ivec2(2, 0),
    ivec2(3, 0),
    ivec2(4, 0),
    ivec2(5, 0),
    ivec2(6, 0),
    ivec2(7, 0),
    ivec2(8, 0),
    ivec2(9, 0),
    ivec2(10, 0),
    ivec2(11, 0),
    ivec2(12, 0),
    ivec2(13, 0),
    ivec2(14, 0),
    ivec2(1, 15),
    ivec2(2, 15),
    ivec2(3, 15),
    ivec2(4, 15),
    ivec2(5, 15),
    ivec2(6, 15),
    ivec2(7, 15),
    ivec2(8, 15),
    ivec2(9, 15),
    ivec2(10, 15),
    ivec2(11, 15),
    ivec2(12, 15),
    ivec2(13, 15),
    ivec2(14, 15),
};

ivec2 depthCopiesSrc[4 + 4 * 14] = {
    // Borders
    ivec2(14,  14),
    ivec2(14,  1),
    ivec2(1,   14),
    ivec2(1,   1),
    // Rows
    ivec2(1, 14),
    ivec2(1, 13),
    ivec2(1, 12),
    ivec2(1, 11),
    ivec2(1, 10),
    ivec2(1, 9),
    ivec2(1, 8),
    ivec2(1, 7),
    ivec2(1, 6),
    ivec2(1, 5),
    ivec2(1, 4),
    ivec2(1, 3),
    ivec2(1, 2),
    ivec2(1, 1),
    ivec2(14, 14),
    ivec2(14, 13),
    ivec2(14, 12),
    ivec2(14, 11),
    ivec2(14, 10),
    ivec2(14, 9),
    ivec2(14, 8),
    ivec2(14, 7),
    ivec2(14, 6),
    ivec2(14, 5),
    ivec2(14, 4),
    ivec2(14, 3),
    ivec2(14, 2),
    ivec2(14, 1),
    // Cols
    ivec2(14, 1),
    ivec2(13, 1),
    ivec2(12, 1),
    ivec2(11, 1),
    ivec2(10, 1),
    ivec2(9,  1),
    ivec2(8,  1),
    ivec2(7,  1),
    ivec2(6,  1),
    ivec2(5,  1),
    ivec2(4,  1),
    ivec2(3,  1),
    ivec2(2,  1),
    ivec2(1,  1),
    ivec2(14, 14),
    ivec2(13, 14),
    ivec2(12, 14),
    ivec2(11, 14),
    ivec2(10, 14),
    ivec2(9,  14),
    ivec2(8,  14),
    ivec2(7,  14),
    ivec2(6,  14),
    ivec2(5,  14),
    ivec2(4,  14),
    ivec2(3,  14),
    ivec2(2,  14),
    ivec2(1,  14),
};

void main()
{
    uint linearIndex = indices[gl_WorkGroupID.x];
    ivec3 probeIndex = probeLinearIndexToGridIndex(linearIndex, grid);
    ivec2 globalIrradianceFragOffset = probeIndexToColorUVOffset(probeIndex, grid);
    ivec2 globalDepthFragOffset = probeIndexToDepthUVOffset(probeIndex, grid);

    vec4 value;
    value = imageLoad(irradiance, globalIrradianceFragOffset + irradianceCopiesSrc[gl_LocalInvocationID.x]);
    imageStore(irradiance, globalIrradianceFragOffset + irradianceCopiesDst[gl_LocalInvocationID.x], value);
    if(gl_LocalInvocationID.x < (4 + 4 * 16) / 3 - 1) {
        value = imageLoad(depth, globalDepthFragOffset + depthCopiesSrc[3 * gl_LocalInvocationID.x + 0]);
        imageStore(depth, globalDepthFragOffset + depthCopiesDst[3 * gl_LocalInvocationID.x + 0], value);
        value = imageLoad(depth, globalDepthFragOffset + depthCopiesSrc[3 * gl_LocalInvocationID.x + 1]);
        imageStore(depth, globalDepthFragOffset + depthCopiesDst[3 * gl_LocalInvocationID.x + 1], value);
        value = imageLoad(depth, globalDepthFragOffset + depthCopiesSrc[3 * gl_LocalInvocationID.x + 2]);
        imageStore(depth, globalDepthFragOffset + depthCopiesDst[3 * gl_LocalInvocationID.x + 2], value);
    } else if(gl_LocalInvocationID.x == 22) {
        value = imageLoad(depth, globalDepthFragOffset + depthCopiesSrc[3 * gl_LocalInvocationID.x + 0]);
        imageStore(depth, globalDepthFragOffset + depthCopiesDst[3 * gl_LocalInvocationID.x + 0], value);
        value = imageLoad(depth, globalDepthFragOffset + depthCopiesSrc[3 * gl_LocalInvocationID.x + 1]);
        imageStore(depth, globalDepthFragOffset + depthCopiesDst[3 * gl_LocalInvocationID.x + 1], value);
    }
}