#version 460
#extension GL_EXT_ray_tracing : enable

#include "common.glsl"
#include "ProbeGrid.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 6, std140) uniform Block {
    ProbeGrid grid;
};

layout(set = 0, binding = 7)           buffer          ProbesBlock { uint Probes[]; };
layout(set = 0, binding = 11, rgba32f) uniform image2D rayIrradianceDepth;
layout(set = 0, binding = 12, rgba32f) uniform image2D rayDirection;
layout(set = 0, binding = 15)          buffer          ProbeIndicesBlock { uint indices[]; };

layout(push_constant) uniform Push {
    mat4 randomOrientation;
} push;

#include "irradiance.glsl"
#include "rayPayload.glsl"

layout(location = 0) rayPayloadEXT rayPayload payload;

const float tmin = 0.01;

void main() {
    uint linearIndex = indices[gl_LaunchIDEXT.x];
    ivec3 probeIndex = probeLinearIndexToGridIndex(linearIndex, grid);
    uint rayIndex = gl_LaunchIDEXT.y;
    float tmax = length(grid.extentMax - grid.extentMin);
    
	vec4 origin = vec4(probeIndexToWorldPosition(probeIndex, grid), 1);
	vec3 direction = mat3(push.randomOrientation) * sphericalFibonacci(rayIndex, grid.raysPerProbe);

	payload.color = vec4(0.0);
    payload.depth = -1;
	payload.raydx = rotateAxis(direction, normalize(cross(direction, vec3(1, 0, 0))), 0.001);
	payload.raydy = rotateAxis(direction, normalize(cross(direction, vec3(0, 1, 0))), 0.001);
    payload.recursionDepth = 1; // Skip reflections
	traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, origin.xyz, tmin, direction, tmax, 0);
        
    ivec2 coords = ivec2(gl_LaunchIDEXT.x, rayIndex);
    imageStore(rayIrradianceDepth, coords, vec4(payload.color.rgb, payload.depth));
    if(gl_LaunchIDEXT.x == rayIndex)
        imageStore(rayDirection, ivec2(0, rayIndex), vec4(direction, 1.0));
}
