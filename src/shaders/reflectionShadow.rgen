#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 5, set = 0) buffer MaterialsBlock { uint Materials[]; };
layout(binding = 9, set = 0) uniform UniformBufferObject 
{
    mat4 view;
    mat4 proj;
} ubo;
layout(binding = 10, set = 0, rgba32f) uniform image2D positionDepthTex;
layout(binding = 11, set = 0, rgba32f) uniform image2D normalMaterialTex;
layout(binding = 12, set = 0, rgba32f) uniform image2D albedoTex;

layout(binding = 13, set = 0, rgba32f) uniform image2D reflectionOut;
layout(binding = 14, set = 0, rgba32f) uniform image2D directLightOut;

#include "Material.glsl"
#include "rayPayload.glsl"
#include "pbrMetallicRoughness.glsl"

layout(location = 0) rayPayloadEXT rayPayload payload;
layout(location = 1) rayPayloadEXT bool isShadowed;

vec3 rotateAxis(vec3 p, vec3 axis, float angle) {
	return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);
}

const float tmin = 0.001;
const float tmax = 100000.0;

// FIXME: To Uniforms?
struct Light {
	uint type; // 0 Directional, 1 Point light
	vec3 color;
	vec3 direction;
};

Light Lights[3] = {
	Light(0, vec3(4.0), normalize(vec3(-1, 7, 2))),
	Light(1, vec3(300.0, 100.0, 100.0), vec3(-620, 160, 143.5)),
	Light(1, vec3(300.0, 100.0, 100.0), vec3(487, 160, 143.5))
};

void main() 
{
	vec4 origin = inverse(ubo.view) * vec4(0, 0, 0, 1);
	
	vec4 positionDepth = imageLoad(positionDepthTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 normalMaterial = imageLoad(normalMaterialTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 albedo = imageLoad(albedoTex, ivec2(gl_LaunchIDEXT.xy));

	vec3 position = positionDepth.xyz;
	float depth = positionDepth.w;
	vec3 normal = normalMaterial.xyz;
	uint materialIndex = floatBitsToUint(normalMaterial.w);
	Material material = unpackMaterial(materialIndex);

	vec3 toOrigin = normalize(origin.xyz - position);

    payload.color = vec4(0.0);
    payload.recursionDepth = 1; // We've technically already solved the first ray (by rasterisation, but still.)

	// Basis for ray differentials
	vec3 tangent;
	vec3 bitangent;
	if(normal.x < 0.9) {
		tangent = cross(vec3(1.0, 0.0, 0.0), normal);
		bitangent = cross(normal, tangent);
	} else {
		tangent = cross(vec3(0.0, 0.0, 1.0), normal);
		bitangent = cross(normal, tangent);
	}

	// Reflection
	vec3 direction = reflect(-toOrigin, normal);
	payload.raydx = rotateAxis(direction, normal, 0.1);
	payload.raydy = rotateAxis(cross(normal, direction), normal, 0.1);
	traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, position, tmin, direction, tmax, 0);
	imageStore(reflectionOut, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color.rgb, 1.0));

	// Direct Light
	vec3 color = vec3(0.0);
	for(int i = 0; i < Lights.length(); ++i) {
		isShadowed = true;
		vec3 direction = Lights[i].type == 0 ? Lights[i].direction : normalize(Lights[i].direction - position);
		float tmax = Lights[i].type == 0 ? 10000.0 : length(Lights[i].direction - position);
		traceRayEXT(topLevelAS,            // acceleration structure
					gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT,             // rayFlags
					0xFF,                  // cullMask
					0,                     // sbtRecordOffset
					0,                     // sbtRecordStride
					1,                     // missIndex
					position,              // ray origin
					0.1,                   // ray min range
					direction,             // ray direction
					tmax,                  // ray max range
					1                      // payload (location = 1)
		);
		if(!isShadowed) {
			// FIXME: IDK, read stuff https://learnopengl.com/PBR/Lighting
			vec3 lightColor = Lights[i].type == 0 ? Lights[i].color : Lights[i].color / (length(Lights[i].direction - position) + 1); // Should realistically be ((length(Lights[i].direction - position) + 1) * (length(Lights[i].direction - position) + 1)); but require very powerfull light to have an impact, idk.
			color += pbrMetallicRoughness(normal, -toOrigin, lightColor, Lights[i].direction, albedo, material.metallicFactor, material.roughnessFactor).rgb;
		}
	}
	imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
