#version 460
#extension GL_EXT_ray_tracing : enable

#include "Lights.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 10, set = 0) uniform LightUBO {
	Light DirectionalLight;
};
layout(binding = 11, set = 0) uniform UniformBufferObject 
{
    mat4 view;
    mat4 proj;
} ubo;
layout(binding = 12, set = 0, rgba32f) uniform image2D positionDepthTex;
layout(binding = 13, set = 0, rgba32f) uniform image2D normalMetalnessTex;
layout(binding = 14, set = 0, rgba32f) uniform image2D albedoRoughnessTex;

layout(binding = 15, set = 0, rgba32f) uniform image2D reflectionOut;
layout(binding = 16, set = 0, rgba32f) uniform image2D directLightOut;

#include "rayPayload.glsl"
#include "pbrMetallicRoughness.glsl"

layout(location = 0) rayPayloadEXT rayPayload payload;
layout(location = 1) rayPayloadEXT bool isShadowed;

vec3 rotateAxis(vec3 p, vec3 axis, float angle) {
	return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);
}

const float tmin = 0.1;
const float tmax = 10000.0;

vec2 getRayDirection(uvec2 coords) {
	const vec2 pixelCenter = vec2(coords) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	return inUV * 2.0 - 1.0;
}

#include "sky.glsl"

void main() 
{
	vec4 origin = inverse(ubo.view) * vec4(0, 0, 0, 1);
	
	vec4 positionDepth = imageLoad(positionDepthTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 normalMetalness = imageLoad(normalMetalnessTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 albedoRoughness = imageLoad(albedoRoughnessTex, ivec2(gl_LaunchIDEXT.xy));

	vec3 position = positionDepth.xyz;
	float depth = positionDepth.w;
	vec3 normal = normalMetalness.xyz;
	float metalness = normalMetalness.w;
	vec3 albedo = albedoRoughness.rgb;
	float roughness = albedoRoughness.a;

	vec3 toOrigin = normalize(origin.xyz - position);

    payload.color = vec4(0.0);
    payload.recursionDepth = 1; // We've technically already solved the first ray (by rasterisation, but still.)

	// Basis for ray differentials
	vec3 tangent;
	vec3 bitangent;
	if(normal.x < 0.9) {
		tangent = cross(vec3(1.0, 0.0, 0.0), normal);
		bitangent = cross(normal, tangent);
	} else {
		tangent = cross(vec3(0.0, 0.0, 1.0), normal);
		bitangent = cross(normal, tangent);
	}

	// Reflection
	vec3 direction = reflect(-toOrigin, normal);
	payload.raydx = rotateAxis(direction, normal, 0.001);
	payload.raydy = rotateAxis(direction, cross(normal, direction), 0.001);
	float shortTmax = tmax; // 10.0 + (1.0 - roughness) * tmax; // Shorten tmax based on roughness, distant objects should not affect rough surfaces that much, accelerating traversal.
	traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, position, tmin, direction, shortTmax, 0);
	//if(payload.depth < 0) payload.color = vec4(0); // Because of the short tmax, we have to ignore misses. No sky reflection :( Maybe it's not worth it...
	imageStore(reflectionOut, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color.rgb, roughness));
	
	// Direct Light
	// We missed and reached the environement map, use the miss shader color
	if(depth <= 0) {
		vec3 skyColor = sky(origin.xyz, normalize(inverse(ubo.view) * inverse(ubo.proj) * vec4(getRayDirection(gl_LaunchIDEXT.xy), 1.0, 1.0)).xyz, DirectionalLight.direction.xyz, DirectionalLight.color.rgb, true);
		imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(skyColor, 1.0));
	} else { // Otherwise, trace some shadows
		vec3 color = vec3(0.0);
		isShadowed = true;
		float tmax = 10000.0;
		traceRayEXT(topLevelAS,            // acceleration structure
					gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT,             // rayFlags
					0xFF,                  // cullMask
					0,                     // sbtRecordOffset
					0,                     // sbtRecordStride
					1,                     // missIndex
					position,              // ray origin
					0.1,                   // ray min range
					DirectionalLight.direction.xyz,             // ray direction
					tmax,                  // ray max range
					1                      // payload (location = 1)
		);
		// TODO: Rather than shading right here, we could only store visibility, take multiple samples for soft shadows (and accumulate over a couple of frame maybe), then denoise before any shading.
		if(!isShadowed) {
			// FIXME: IDK, read stuff https://learnopengl.com/PBR/Lighting
			color += pbrMetallicRoughness(normal, toOrigin, DirectionalLight.color.rgb, DirectionalLight.direction.xyz, vec4(albedo, 1.0), metalness, roughness).rgb;
		}
		imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
	}
}
