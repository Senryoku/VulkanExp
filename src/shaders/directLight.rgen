#version 460
#extension GL_EXT_ray_tracing : enable

#include "Lights.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 10, set = 0) uniform LightUBO {
	Light DirectionalLight;
};
layout(binding = 11, set = 0) uniform UniformBufferObject 
{
    mat4 view;
    mat4 proj;
	uint frameIndex;
} ubo;
layout(binding = 12, set = 0, rgba32f) uniform image2D positionDepthTex;
layout(binding = 13, set = 0, rgba32f) uniform image2D normalMetalnessTex;
layout(binding = 14, set = 0, rgba32f) uniform image2D albedoRoughnessTex;

layout(binding = 15, set = 0, rgba32f) uniform image2D directLightOut;

#include "pbrMetallicRoughness.glsl"

layout(location = 1) rayPayloadEXT bool isShadowed;

const float tmin = 0.1;
const float tmax = 10000.0;

#include "sky.glsl"

vec2 getRayDirection(uvec2 coords) {
	const vec2 pixelCenter = vec2(coords) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	return inUV * 2.0 - 1.0;
}

void main() 
{
	vec4 origin = inverse(ubo.view) * vec4(0, 0, 0, 1);
	
	vec4 positionDepth = imageLoad(positionDepthTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 normalMetalness = imageLoad(normalMetalnessTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 albedoRoughness = imageLoad(albedoRoughnessTex, ivec2(gl_LaunchIDEXT.xy));

	vec3 position = positionDepth.xyz;
	float depth = positionDepth.w;
	vec3 normal = normalMetalness.xyz;
	float metalness = normalMetalness.w;
	vec3 albedo = albedoRoughness.rgb;
	float roughness = albedoRoughness.a;

	vec3 toOrigin = normalize(origin.xyz - position);

	// We missed and reached the environement map, use the miss shader color
	if(depth <= 0) {
		vec4 target = inverse(ubo.proj) * vec4(getRayDirection(gl_LaunchIDEXT.xy), 1, 1);
		vec4 direction = inverse(ubo.view) * vec4(normalize(target.xyz), 0);
		vec3 skyColor = sky(origin.xyz, direction.xyz, DirectionalLight.direction.xyz, DirectionalLight.color.rgb, true);
		imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(skyColor, 1.0));
	} else { // Otherwise, trace some shadows
		vec3 color = vec3(0.0);
		isShadowed = true;
		float tmax = 10000.0;
		// TODO: Add a shadow offset? (Needs to pass a lot more geometric data, or 'just' the bias (a vec3, probably compressible to a vec2).
		traceRayEXT(topLevelAS,            // acceleration structure
					gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT,             // rayFlags
					0xFF,                  // cullMask
					0,                     // sbtRecordOffset
					0,                     // sbtRecordStride
					1,                     // missIndex
					position,              // ray origin
					0.1,                   // ray min range
					DirectionalLight.direction.xyz,             // ray direction
					tmax,                  // ray max range
					1                      // payload (location = 1)
		);
		// TODO: Rather than shading right here, we could only store visibility, take multiple samples for soft shadows (and accumulate over a couple of frame maybe), then denoise before any shading.
		// https://link.springer.com/content/pdf/10.1007%2F978-1-4842-7185-8.pdf Chapter 24
		if(!isShadowed) {
			// FIXME: IDK, read stuff https://learnopengl.com/PBR/Lighting
			color += pbrMetallicRoughness(normal, toOrigin, DirectionalLight.color.rgb, DirectionalLight.direction.xyz, vec4(albedo, 1.0), metalness, roughness).rgb;
		}
		imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
	}
}
