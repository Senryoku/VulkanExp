#version 460
#extension GL_EXT_ray_tracing : enable

#include "Lights.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 10) uniform LightUBO {
	Light DirectionalLight;
};
layout(set = 0, binding = 11) uniform UniformBufferObject 
{
    mat4 view;
    mat4 proj;
	vec3 origin;
	uint frameIndex;
} ubo;
layout(set = 0, binding = 12, rgba32f) uniform image2D positionDepthTex;
layout(set = 0, binding = 13, rgba32f) uniform image2D normalMetalnessTex;
layout(set = 0, binding = 14, rgba32f) uniform image2D albedoRoughnessTex;

layout(set = 0, binding = 15, rgba32f) uniform image2D directLightOut;
layout(set = 0, binding = 16, rgba32f) uniform image2D previousDirectLight;

layout(set = 1, binding = 0) uniform sampler blueNoiseSampler;
layout(set = 1, binding = 1) uniform texture2D blueNoiseTextures[64];

#include "pbrMetallicRoughness.glsl"

layout(location = 1) rayPayloadEXT bool isShadowed;

const float tmin = 0.1;
const float tmax = 10000.0;

#include "sky.glsl"

vec2 getRayDirection(uvec2 coords) {
	const vec2 pixelCenter = vec2(coords) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	return inUV * 2.0 - 1.0;
}

void main() 
{
	vec4 origin = inverse(ubo.view) * vec4(0, 0, 0, 1);
	
	vec4 positionDepth = imageLoad(positionDepthTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 normalMetalness = imageLoad(normalMetalnessTex, ivec2(gl_LaunchIDEXT.xy));
	vec4 albedoRoughness = imageLoad(albedoRoughnessTex, ivec2(gl_LaunchIDEXT.xy));

	vec3 position = positionDepth.xyz;
	float depth = positionDepth.w;
	vec3 normal = normalMetalness.xyz;
	float metalness = normalMetalness.w;
	vec3 albedo = albedoRoughness.rgb;
	float roughness = albedoRoughness.a;

	vec3 toOrigin = normalize(origin.xyz - position);

	// We missed and reached the environement map, use the miss shader color
	if(depth <= 0) {
		//vec4 target = inverse(ubo.proj) * vec4(getRayDirection(gl_LaunchIDEXT.xy), 1, 1);
		//vec4 direction = inverse(ubo.view) * vec4(normalize(target.xyz), 0);
		//vec3 skyColor = sky(origin.xyz, direction.xyz, DirectionalLight.direction.xyz, DirectionalLight.color.rgb, true);
		imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(-1.0));
	} else { // Otherwise, trace some shadows
		vec4 previousValue = imageLoad(previousDirectLight, ivec2(gl_LaunchIDEXT.xy));
		// TODO: Use the previous value variance to shoot more (high variance) or less (low variance) rays.
		float outColor = 0.0;
		isShadowed = true;
		float tmax = 10000.0;
		vec3 direction = normalize(DirectionalLight.direction.xyz);
		// Take a single sample on the disk
		float angle = 0.02; // Angle diameter of our primary light source (rad)
		vec4 noise = texture(sampler2D(blueNoiseTextures[ubo.frameIndex % 64], blueNoiseSampler), vec2(gl_LaunchIDEXT.xy / 64.0));
		vec3 temp = rotateAxis(direction, normalize(cross(normal, direction)), 2 * (noise.x - 0.5) * angle); // FIXME: The distribution is probably biased here, but I don't think it should matter that much for such small angles.
		direction = rotateAxis(temp, direction, 2.0 * pi * noise.y);
		if(dot(direction, normal) > 0.0) { // Bail early if this light will not contribute anyway.
			// TODO: Add a shadow offset? (Needs to pass a lot more geometric data, or 'just' the bias (a vec3, probably compressible to a vec2).
			traceRayEXT(topLevelAS,                                                                         // acceleration structure
						gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT,             // rayFlags
						0xFF,                                                                               // cullMask
						0,                                                                                  // sbtRecordOffset
						0,                                                                                  // sbtRecordStride
						1,                                                                                  // missIndex
						position,                                                                           // ray origin
						0.01,                                                                               // ray min range
						direction,                                                                          // ray direction
						tmax,                                                                               // ray max range
						1                                                                                   // payload (location = 1)
			);
			if(!isShadowed) {
				outColor = 1.0;
				if(direction.y < 0) // FIXME: Special case for the sun, fading it out during the 'night' (when it is below the horizon, shining from underneath)
					outColor *= 1.0 - clamp(-direction.y, 0, 0.1) / 0.1;
			}
			imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(outColor, previousValue.gb, 1.0));
		} else imageStore(directLightOut, ivec2(gl_LaunchIDEXT.xy), vec4(0.0, 0.0, 0.0, 0.0));
	}
}
