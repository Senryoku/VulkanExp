/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 6, set = 0) uniform UniformBufferObject 
{
    mat4 view;
    mat4 proj;
} ubo;
layout(binding = 7, set = 0, rgba8) uniform image2D image;

#include "rayPayload.glsl"

layout(location = 0) rayPayloadEXT rayPayload payload;

vec2 getRayDirection(uvec2 coords) {
	const vec2 pixelCenter = vec2(coords) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	return inUV * 2.0 - 1.0;
}

void main() 
{
	vec2 d = getRayDirection(gl_LaunchIDEXT.xy);

	vec4 origin = inverse(ubo.view) * vec4(0, 0, 0, 1);
	vec4 target = inverse(ubo.proj) * vec4(d.x, d.y, 1, 1);
	vec4 direction = inverse(ubo.view) * vec4(normalize(target.xyz), 0);

	float tmin = 0.001;
	float tmax = 100000.0;

    payload.color = vec4(0.0);

	vec4 dxtarget = inverse(ubo.proj) * vec4(getRayDirection(gl_LaunchIDEXT.xy + uvec2(1, 0)), 1, 1);
	payload.raydx = (inverse(ubo.view) * vec4(normalize(dxtarget.xyz), 0)).xyz;
	
	vec4 dytarget = inverse(ubo.proj) * vec4(getRayDirection(gl_LaunchIDEXT.xy + uvec2(0, 1)), 1, 1);
	payload.raydy = (inverse(ubo.view) * vec4(normalize(dytarget.xyz), 0)).xyz;

	traceRayEXT(topLevelAS, 0, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color.rgb, 1.0));
}
