/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 6, set = 0, r11f_g11f_b10f) uniform image2D color;
layout(binding = 7, set = 0, rg16f) uniform image2D depth;

layout(push_constant) uniform Push {
    mat3 randomOrientation;
} push;

struct rayPayload {
	vec3 raydx;
	vec3 raydy;

	vec3 color; // Result
	float depth;
};

layout(location = 0) rayPayloadEXT rayPayload payload;

const uint ColorRes = 8;
const uint DepthRes = 16;

// TODO: Turn these into uniforms
const vec3 gridMin = vec3(000.f);
const vec3 gridMax = vec3(400.f);
const vec3 gridSpan = gridMax - gridMin;
const vec3 gridCellSize = vec3(gridSpan.x / 32, gridSpan.y / 8, gridSpan.z / 32);

const float pi = 3.1415926538f;
const uint RaysPerProbe = 16;

vec3 probeIndexToWorldPosition(uint index) {
	ivec3 pos = ivec3(index % 32, (index % (32 * 8)) / 32, index / (32 * 8));
	return pos * gridCellSize;
	// TODO: Add per-probe offset (< half of the size of a grid cell)
}

vec3 gridPositionToWorldPosition(uvec3 position) {
	return position * gridCellSize;
}

/**  Generate a spherical fibonacci point

    http://lgdv.cs.fau.de/publications/publication/Pub.2015.tech.IMMD.IMMD9.spheri/

    To generate a nearly uniform point distribution on the unit sphere of size N, do
    for (float i = 0.0; i < N; i += 1.0) {
        float3 point = sphericalFibonacci(i,N);
    }

    The points go from z = +1 down to z = -1 in a spiral. To generate samples on the +z hemisphere,
    just stop before i > N/2.

*/
vec3 sphericalFibonacci(float i, float n) {
    const float PHI = sqrt(5) * 0.5 + 0.5;
#   define madfrac(A, B) ((A)*(B)-floor((A)*(B)))
    float phi = 2.0 * pi * madfrac(i, PHI - 1);
    float cosTheta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sinTheta = sqrt(clamp(1.0 - cosTheta * cosTheta, 0, 1));

    return vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta);

#   undef madfrac
}

vec2 spherePointToOctohedralUV(vec3 direction) {
    vec3 octant = sign(direction);

    // Scale the vector so |x| + |y| + |z| = 1 (surface of octahedron).
    float sum = dot(direction, octant);        
    vec3 octahedron = direction / sum;    

    // "Untuck" the corners using the same reflection across the diagonal as before.
    // (A reflection is its own inverse transformation).
    if(octahedron.z < 0) {
        vec3 absolute = abs(octahedron);
        octahedron.xy = octant.xy
                      * vec2(1.0f - absolute.y, 1.0f - absolute.x);
    }

    return octahedron.xy * 0.5f + 0.5f;
}

void main() 
{
	vec4 origin = vec4(gridPositionToWorldPosition(gl_LaunchIDEXT.xyz), 1);
    ivec2 probeUVOffset = ivec2(ColorRes * gl_LaunchIDEXT.xy);

    vec3 results[ColorRes][ColorRes];
    for(int i = 0; i < ColorRes; ++i)
        for(int j = 0; j < ColorRes; ++j)
            results[i][j] = imageLoad(color, probeUVOffset + ivec2(i, j)).xyz;
    vec2 depthResults[DepthRes][DepthRes];
    for(int i = 0; i < DepthRes; ++i)
        for(int j = 0; j < DepthRes; ++j)
            depthResults[i][j] = imageLoad(depth, probeUVOffset + ivec2(i, j)).xy;

	for(int i = 0; i < RaysPerProbe; ++i) {
		vec4 direction = vec4(push.randomOrientation * sphericalFibonacci(i, RaysPerProbe), 1.0f);

		float tmin = 0.001;
		float tmax = 100000.0;

		payload.color = vec3(1.0, 0.0, 0.0);

		payload.raydx = normalize(vec3(1.1, 0, 0));
		payload.raydy = normalize(vec3(1, 0.1, 0));
        vec2 uv = spherePointToOctohedralUV(direction.xyz);
        ivec2 colorUV = ivec2((ColorRes - 2) * uv);
        ivec2 depthUV = ivec2((DepthRes - 2) * uv);
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        // FIXME: Nonononono
        results[colorUV.x][colorUV.y] += payload.color;
        payload.depth /= length(gridCellSize);
        depthResults[depthUV.x][depthUV.y] = max(depthResults[depthUV.x][depthUV.y], vec2(payload.depth, payload.depth * payload.depth));
	}
    for(int i = 0; i < ColorRes; ++i)
        for(int j = 0; j < ColorRes; ++j) {
            imageStore(color, probeUVOffset + ivec2(i, j), vec4(results[i][j], 1.0));
	        imageStore(depth, probeUVOffset + ivec2(i, j), vec4(depthResults[i][j], 0.0, 0.0));
        }
}
